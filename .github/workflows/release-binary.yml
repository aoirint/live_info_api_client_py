name: Release Binary

on:
  release:
    types:
      - created

env:
  VERSION: ${{ github.event.release.tag_name != '' && github.event.release.tag_name || '0.0.0' }}

jobs:
  build-binary:
    strategy:
      fail-fast: false
      matrix:
        include:
          -
            os: ubuntu-20.04
            python_version: '3.8.14' # the latest version of 3.8.x
            sed: 'sed'
            dist_artifact_name: binary-dist-linux-amd64
            binary_name: liveinfo
            asset_name: liveinfo-linux-amd64.tgz
          -
            os: windows-2019
            python_version: '3.8.10' # the latest version of 3.8.x
            sed: 'sed'
            dist_artifact_name: binary-dist-windows-amd64
            binary_name: liveinfo.exe
            asset_name: liveinfo-windows-amd64.zip
          -
            os: macos-11
            python_version: '3.8.14' # the latest version of 3.8.x
            sed: 'gsed'
            dist_artifact_name: binary-dist-macos-amd64
            binary_name: liveinfo
            asset_name: liveinfo-macos-amd64.tgz

    runs-on: ${{ matrix.os }}

    steps:
      - uses: actions/checkout@v3

      - name: Install gsed for macOS
        if: startsWith(matrix.os, 'macos-')
        shell: bash
        run: brew install gnu-sed

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python_version }}
          cache: 'pip'
          cache-dependency-path: |
            **/requirements-development.txt

      - name: Install Dependencies
        run: |
            pip3 install -r requirements-development.txt
            pip3 install wheel

      - name: Replace version
        shell: bash
        run: |
          "${{ matrix.sed }}" -i "s/__VERSION__ = '0.0.0'/__VERSION__ = '${{ env.VERSION }}'/" liveinfo/__init__.py

      - name: Build Binary
        run: pyinstaller --name liveinfo --onefile main.py

      - name: Upload dist/* to Artifact
        uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.dist_artifact_name }}
          path: dist/*


  upload-binary:
    needs: [build-binary]
    runs-on: ubuntu-latest

    strategy:
      fail-fast: false
      matrix:
        include:
          -
            dist_artifact_name: binary-dist-linux-amd64
            binary_name: liveinfo
            asset_name: liveinfo-linux-amd64.tgz
          -
            dist_artifact_name: binary-dist-windows-amd64
            binary_name: liveinfo.exe
            asset_name: liveinfo-windows-amd64.zip
          -
            dist_artifact_name: binary-dist-macos-amd64
            binary_name: liveinfo
            asset_name: liveinfo-macos-amd64.tgz

    steps:
      - name: Restore dist/ from Binary artifact
        uses: actions/download-artifact@v3
        with:
          name: ${{ matrix.dist_artifact_name }}
          path: ./dist

      - name: Create release asset name
        id: create-release-asset-name
        shell: bash
        run: |
          ASSET_NAME="${{ matrix.asset_name }}"
          ASSET_NAME_STEM="${ASSET_NAME%%.*}"
          ASSET_NAME_EXTENSION="${ASSET_NAME#*.}"

          echo "release_asset_name_stem=${ASSET_NAME_STEM}-${{ env.VERSION }}" >> $GITHUB_OUTPUT
          echo "release_asset_name=${ASSET_NAME_STEM}-${{ env.VERSION }}.${ASSET_NAME_EXTENSION}" >> $GITHUB_OUTPUT

      - name: Create release asset (.tgz)
        if: endsWith(matrix.asset_name, '.tgz')
        shell: bash
        run: |
          cd dist
          mkdir "${{ steps.create-release-asset-name.outputs.release_asset_name_stem }}"
          mv "${{ matrix.binary_name }}" "${{ steps.create-release-asset-name.outputs.release_asset_name_stem }}/"

          tar czf "${{ steps.create-release-asset-name.outputs.release_asset_name }}" "${{ steps.create-release-asset-name.outputs.release_asset_name_stem }}/"

      - name: Create release asset (.zip)
        if: endsWith(matrix.asset_name, '.zip')
        shell: bash
        run: |
          cd dist
          mkdir "${{ steps.create-release-asset-name.outputs.release_asset_name_stem }}"
          mv "${{ matrix.binary_name }}" "${{ steps.create-release-asset-name.outputs.release_asset_name_stem }}/"

          zip -r "${{ steps.create-release-asset-name.outputs.release_asset_name }}" "${{ steps.create-release-asset-name.outputs.release_asset_name_stem }}/"

      - name: Upload Binary to Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ env.VERSION }}
          target_commitish: ${{ github.sha }}
          files: dist/${{ steps.create-release-asset-name.outputs.release_asset_name }}
